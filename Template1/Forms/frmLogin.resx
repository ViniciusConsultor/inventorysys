<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADDfwAAxIAAAMmOIADLkSAAzJIkAM6VJADOmC8A0JolAM+aMADLnD8A0p0xANKdNADRnD0A1KAxANSh
        NADTnkgA1aJBANWjSgDUoE4A1KFTANWkUgDVolcA1qVXANWlXADWpWAA1qVlANipZQDWpmkA16dsANip
        agDYq20A16lxANmrcQDYqnQA2ax1ANmreADZrXoA2q98ANuwfwChloUApJqJAKedjQCpn48AqqCQAK2i
        kgCwppcAsaeYALOpmgC3rZ4AurGjALqxpQC9tKgAv7isANqugQDbsYMA27CHANyyhwDbsYoA3LOKANyy
        jgDctI4A3LWSANy3lgDgvJ0AwbisAMO8sQDFvbEAycG2AMvEugDNxboAzce9AM/IvgDQyb8A0MrAANTO
        xQDW0ckA2dPLANjTzADZ1c4A3NfPANvX0ADe2dIA3trUAN3e3gDg3dYA4d7ZAOPg2wDk4dsA5eLdAOfk
        3wDo5eEA6+jkAOzq5gDq6uoA7uzoAO3u7gDw7eoA8e/sAPLy8gD29vYA+fj3APr6+gD+/v4AZ/AAAHj/
        EQCK/zEAnP9RAK7/cQDA/5EA0v+xAOT/0QD///8AAAAAACYvAABAUAAAWnAAAHSQAACOsAAAqc8AAMLw
        AADR/xEA2P8xAN7/UQDj/3EA6f+RAO//sQD2/9EA////AAAAAAAvJgAAUEEAAHBbAACQdAAAsI4AAM+p
        AADwwwAA/9IRAP/YMQD/3VEA/+RxAP/qkQD/8LEA//bRAP///wAAAAAALxQAAFAiAABwMAAAkD4AALBN
        AADPWwAA8GkAAP95EQD/ijEA/51RAP+vcQD/wZEA/9KxAP/l0QD///8AAAAAAC8DAABQBAAAcAYAAJAJ
        AACwCgAAzwwAAPAOAAD/IBIA/z4xAP9cUQD/enEA/5eRAP+2sQD/1NEA////AAAAAAAvAA4AUAAXAHAA
        IQCQACsAsAA2AM8AQADwAEkA/xFaAP8xcAD/UYYA/3GcAP+RsgD/scgA/9HfAP///wAAAAAALwAgAFAA
        NgBwAEwAkABiALAAeADPAI4A8ACkAP8RswD/Mb4A/1HHAP9x0QD/kdwA/7HlAP/R8AD///8AAAAAACwA
        LwBLAFAAaQBwAIcAkAClALAAxADPAOEA8ADwEf8A8jH/APRR/wD2cf8A95H/APmx/wD70f8A////AAAA
        AAAbAC8ALQBQAD8AcABSAJAAYwCwAHYAzwCIAPAAmRH/AKYx/wC0Uf8AwnH/AM+R/wDcsf8A69H/AP//
        /wAAAAAACAAvAA4AUAAVAHAAGwCQACEAsAAmAM8ALADwAD4R/wBYMf8AcVH/AIxx/wCmkf8Av7H/ANrR
        /wD///8APz4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj87U1NTU1NTU1NTU1NTU1NTU1NTU1NT
        U1NTU1NTU1NTPTldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV08N29vb29vb29vb29vb29vb29v
        b29vb29vb29vb29vbzw2b29vb29vb29vb29vb29vb29vb29vb29vb29vb29vOjVvb29vb29vb29vb29v
        b29vb29vb29vb29vb29vb284JG9kXFxcXFxcXFxcYW9vb29vb29vb29vb29vb29vbzYjb2FKSkpKSkpK
        SkpSb29vYl9fX19fX2Rvb29vb29vJiFvYEhISEhISEhISE9vb29mZWZlZmVlZm9vb29vb28lH29eRUVG
        RUZFRkVFTG9vb2NiYmJiYmJlb29mSl5vbyQcb15DQ0NDQ0NDQ0NLb29vYmFfYV9fX2Rvb29HW29vIhtv
        XEJCQkJCQkJCQkpvb29iX19fYV9iZG9vZkNab28gGW9bQEBAQEBAQEBASW9vb29vb29vb29vb29mQllv
        bx4Yb1ozMzMzMzMzMzNGb29vYl9fX19fYWRvb2Y0WG9vHRdvWjIxMjEyMTIxMkVvb29iX19fYV9fY29v
        bzFVb28aFW9ZMDAwMDAwMDAwRG9vb2JfX2FfX19kb29mMFRvbxgTb1kvLy8vLy8vLy9Cb29vb29vb29v
        b29vb2YuUm9vFxJvWC0uLi4tLi4uLkFvb29iX19fX19fZG9vZixRb28WD29XLCwsLCwsLCwsQG9vb2Jf
        X2FfYV9jb29mKlBvbxQMb1YrKysrKysrKys0b29vZGNjY2NjY2Vvb2YoTm9vEQtvVikpKikqKSopKTNv
        b29kY2NjY2NjZW9vZidNb28QB29VKCgoKCgoKCgoM29vb2JfX19fX19kb29mTV5vbw4Hb1UnJycnJycn
        Jycxb29vYl9fX19fX2Nvb29vb29vDQdvVisrKysrKysrKzRvb29vb29vb29vb29vb29vb28NBW9vb29v
        b29vb29vb29vb29vb29vb29vb29vb29vbwoFb29vb29vb29vb29vb29vb29vb29vb29vb29vb29vCgVf
        X19fX19fX19fX19fX19fX19fX19fX19fX19fX18IBVNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
        UwYDCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJBAMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEDAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIMAgICAgICAgICAgICAgICAgICAgIC
        AgICAgICAgICDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>